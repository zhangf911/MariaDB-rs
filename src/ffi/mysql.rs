/* automatically generated by rust-bindgen */

pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type size_t = ::libc::c_ulong;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __val: [::libc::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed2;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed3;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::clone::Clone for Struct___pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed4 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::clone::Clone for Struct___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutex_t = Union_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed5 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed6 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed8 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed8 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed8;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed9 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed10 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __rwelision: ::libc::c_char,
    pub __pad1: [::libc::c_uchar; 7usize],
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed9;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed11 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed11;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed12 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed13 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed13;
pub type my_bool = ::libc::c_char;
pub type my_socket = ::libc::c_int;
pub type Enum_enum_server_command = ::libc::c_uint;
pub const COM_SLEEP: ::libc::c_uint = 0;
pub const COM_QUIT: ::libc::c_uint = 1;
pub const COM_INIT_DB: ::libc::c_uint = 2;
pub const COM_QUERY: ::libc::c_uint = 3;
pub const COM_FIELD_LIST: ::libc::c_uint = 4;
pub const COM_CREATE_DB: ::libc::c_uint = 5;
pub const COM_DROP_DB: ::libc::c_uint = 6;
pub const COM_REFRESH: ::libc::c_uint = 7;
pub const COM_SHUTDOWN: ::libc::c_uint = 8;
pub const COM_STATISTICS: ::libc::c_uint = 9;
pub const COM_PROCESS_INFO: ::libc::c_uint = 10;
pub const COM_CONNECT: ::libc::c_uint = 11;
pub const COM_PROCESS_KILL: ::libc::c_uint = 12;
pub const COM_DEBUG: ::libc::c_uint = 13;
pub const COM_PING: ::libc::c_uint = 14;
pub const COM_TIME: ::libc::c_uint = 15;
pub const COM_DELAYED_INSERT: ::libc::c_uint = 16;
pub const COM_CHANGE_USER: ::libc::c_uint = 17;
pub const COM_BINLOG_DUMP: ::libc::c_uint = 18;
pub const COM_TABLE_DUMP: ::libc::c_uint = 19;
pub const COM_CONNECT_OUT: ::libc::c_uint = 20;
pub const COM_REGISTER_SLAVE: ::libc::c_uint = 21;
pub const COM_STMT_PREPARE: ::libc::c_uint = 22;
pub const COM_STMT_EXECUTE: ::libc::c_uint = 23;
pub const COM_STMT_SEND_LONG_DATA: ::libc::c_uint = 24;
pub const COM_STMT_CLOSE: ::libc::c_uint = 25;
pub const COM_STMT_RESET: ::libc::c_uint = 26;
pub const COM_SET_OPTION: ::libc::c_uint = 27;
pub const COM_STMT_FETCH: ::libc::c_uint = 28;
pub const COM_DAEMON: ::libc::c_uint = 29;
pub const COM_END: ::libc::c_uint = 30;
pub enum Struct_st_vio { }
pub type Vio = Struct_st_vio;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_net {
    pub vio: *mut Vio,
    pub buff: *mut ::libc::c_uchar,
    pub buff_end: *mut ::libc::c_uchar,
    pub write_pos: *mut ::libc::c_uchar,
    pub read_pos: *mut ::libc::c_uchar,
    pub fd: my_socket,
    pub remain_in_buf: ::libc::c_ulong,
    pub length: ::libc::c_ulong,
    pub buf_length: ::libc::c_ulong,
    pub where_b: ::libc::c_ulong,
    pub max_packet: ::libc::c_ulong,
    pub max_packet_size: ::libc::c_ulong,
    pub pkt_nr: ::libc::c_uint,
    pub compress_pkt_nr: ::libc::c_uint,
    pub write_timeout: ::libc::c_uint,
    pub read_timeout: ::libc::c_uint,
    pub retry_count: ::libc::c_uint,
    pub fcntl: ::libc::c_int,
    pub return_status: *mut ::libc::c_uint,
    pub reading_or_writing: ::libc::c_uchar,
    pub save_char: ::libc::c_char,
    pub net_skip_rest_factor: ::libc::c_char,
    pub thread_specific_malloc: my_bool,
    pub compress: my_bool,
    pub unused3: my_bool,
    pub unused: *mut ::libc::c_uchar,
    pub last_errno: ::libc::c_uint,
    pub error: ::libc::c_uchar,
    pub unused4: my_bool,
    pub unused5: my_bool,
    pub last_error: [::libc::c_char; 512usize],
    pub sqlstate: [::libc::c_char; 6usize],
    pub extension: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_st_net {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_net {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type NET = Struct_st_net;
pub type Enum_enum_field_types = ::libc::c_uint;
pub const MYSQL_TYPE_DECIMAL: ::libc::c_uint = 0;
pub const MYSQL_TYPE_TINY: ::libc::c_uint = 1;
pub const MYSQL_TYPE_SHORT: ::libc::c_uint = 2;
pub const MYSQL_TYPE_LONG: ::libc::c_uint = 3;
pub const MYSQL_TYPE_FLOAT: ::libc::c_uint = 4;
pub const MYSQL_TYPE_DOUBLE: ::libc::c_uint = 5;
pub const MYSQL_TYPE_NULL: ::libc::c_uint = 6;
pub const MYSQL_TYPE_TIMESTAMP: ::libc::c_uint = 7;
pub const MYSQL_TYPE_LONGLONG: ::libc::c_uint = 8;
pub const MYSQL_TYPE_INT24: ::libc::c_uint = 9;
pub const MYSQL_TYPE_DATE: ::libc::c_uint = 10;
pub const MYSQL_TYPE_TIME: ::libc::c_uint = 11;
pub const MYSQL_TYPE_DATETIME: ::libc::c_uint = 12;
pub const MYSQL_TYPE_YEAR: ::libc::c_uint = 13;
pub const MYSQL_TYPE_NEWDATE: ::libc::c_uint = 14;
pub const MYSQL_TYPE_VARCHAR: ::libc::c_uint = 15;
pub const MYSQL_TYPE_BIT: ::libc::c_uint = 16;
pub const MYSQL_TYPE_TIMESTAMP2: ::libc::c_uint = 17;
pub const MYSQL_TYPE_DATETIME2: ::libc::c_uint = 18;
pub const MYSQL_TYPE_TIME2: ::libc::c_uint = 19;
pub const MYSQL_TYPE_NEWDECIMAL: ::libc::c_uint = 246;
pub const MYSQL_TYPE_ENUM: ::libc::c_uint = 247;
pub const MYSQL_TYPE_SET: ::libc::c_uint = 248;
pub const MYSQL_TYPE_TINY_BLOB: ::libc::c_uint = 249;
pub const MYSQL_TYPE_MEDIUM_BLOB: ::libc::c_uint = 250;
pub const MYSQL_TYPE_LONG_BLOB: ::libc::c_uint = 251;
pub const MYSQL_TYPE_BLOB: ::libc::c_uint = 252;
pub const MYSQL_TYPE_VAR_STRING: ::libc::c_uint = 253;
pub const MYSQL_TYPE_STRING: ::libc::c_uint = 254;
pub const MYSQL_TYPE_GEOMETRY: ::libc::c_uint = 255;
pub type Enum_mysql_enum_shutdown_level = ::libc::c_uint;
pub const SHUTDOWN_DEFAULT: ::libc::c_uint = 0;
pub const SHUTDOWN_WAIT_CONNECTIONS: ::libc::c_uint = 1;
pub const SHUTDOWN_WAIT_TRANSACTIONS: ::libc::c_uint = 2;
pub const SHUTDOWN_WAIT_UPDATES: ::libc::c_uint = 8;
pub const SHUTDOWN_WAIT_ALL_BUFFERS: ::libc::c_uint = 16;
pub const SHUTDOWN_WAIT_CRITICAL_BUFFERS: ::libc::c_uint = 17;
pub type Enum_enum_cursor_type = ::libc::c_uint;
pub const CURSOR_TYPE_NO_CURSOR: ::libc::c_uint = 0;
pub const CURSOR_TYPE_READ_ONLY: ::libc::c_uint = 1;
pub const CURSOR_TYPE_FOR_UPDATE: ::libc::c_uint = 2;
pub const CURSOR_TYPE_SCROLLABLE: ::libc::c_uint = 4;
pub type Enum_enum_mysql_set_option = ::libc::c_uint;
pub const MYSQL_OPTION_MULTI_STATEMENTS_ON: ::libc::c_uint = 0;
pub const MYSQL_OPTION_MULTI_STATEMENTS_OFF: ::libc::c_uint = 1;
pub enum Struct_sockaddr { }
pub enum Struct_my_rnd_struct { }
pub type Enum_Item_result = ::libc::c_uint;
pub const STRING_RESULT: ::libc::c_uint = 0;
pub const REAL_RESULT: ::libc::c_uint = 1;
pub const INT_RESULT: ::libc::c_uint = 2;
pub const ROW_RESULT: ::libc::c_uint = 3;
pub const DECIMAL_RESULT: ::libc::c_uint = 4;
pub const TIME_RESULT: ::libc::c_uint = 5;
pub const IMPOSSIBLE_RESULT: ::libc::c_uint = 6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_udf_args {
    pub arg_count: ::libc::c_uint,
    pub arg_type: *mut Enum_Item_result,
    pub args: *mut *mut ::libc::c_char,
    pub lengths: *mut ::libc::c_ulong,
    pub maybe_null: *mut ::libc::c_char,
    pub attributes: *mut *mut ::libc::c_char,
    pub attribute_lengths: *mut ::libc::c_ulong,
    pub extension: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_st_udf_args {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_udf_args {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type UDF_ARGS = Struct_st_udf_args;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_udf_init {
    pub maybe_null: my_bool,
    pub decimals: ::libc::c_uint,
    pub max_length: ::libc::c_ulong,
    pub ptr: *mut ::libc::c_char,
    pub const_item: my_bool,
    pub extension: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_st_udf_init {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_udf_init {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type UDF_INIT = Struct_st_udf_init;
pub type my_time_t = ::libc::c_long;
pub type Enum_enum_mysql_timestamp_type = ::libc::c_int;
pub const MYSQL_TIMESTAMP_NONE: ::libc::c_int = -2;
pub const MYSQL_TIMESTAMP_ERROR: ::libc::c_int = -1;
pub const MYSQL_TIMESTAMP_DATE: ::libc::c_int = 0;
pub const MYSQL_TIMESTAMP_DATETIME: ::libc::c_int = 1;
pub const MYSQL_TIMESTAMP_TIME: ::libc::c_int = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_mysql_time {
    pub year: ::libc::c_uint,
    pub month: ::libc::c_uint,
    pub day: ::libc::c_uint,
    pub hour: ::libc::c_uint,
    pub minute: ::libc::c_uint,
    pub second: ::libc::c_uint,
    pub second_part: ::libc::c_ulong,
    pub neg: my_bool,
    pub time_type: Enum_enum_mysql_timestamp_type,
}
impl ::std::clone::Clone for Struct_st_mysql_time {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_mysql_time {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MYSQL_TIME = Struct_st_mysql_time;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_list {
    pub prev: *mut Struct_st_list,
    pub next: *mut Struct_st_list,
    pub data: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_st_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LIST = Struct_st_list;
pub type list_walk_action =
    ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                        arg2: *mut ::libc::c_void)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_mysql_field {
    pub name: *mut ::libc::c_char,
    pub org_name: *mut ::libc::c_char,
    pub table: *mut ::libc::c_char,
    pub org_table: *mut ::libc::c_char,
    pub db: *mut ::libc::c_char,
    pub catalog: *mut ::libc::c_char,
    pub def: *mut ::libc::c_char,
    pub length: ::libc::c_ulong,
    pub max_length: ::libc::c_ulong,
    pub name_length: ::libc::c_uint,
    pub org_name_length: ::libc::c_uint,
    pub table_length: ::libc::c_uint,
    pub org_table_length: ::libc::c_uint,
    pub db_length: ::libc::c_uint,
    pub catalog_length: ::libc::c_uint,
    pub def_length: ::libc::c_uint,
    pub flags: ::libc::c_uint,
    pub decimals: ::libc::c_uint,
    pub charsetnr: ::libc::c_uint,
    pub _type: Enum_enum_field_types,
    pub extension: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_st_mysql_field {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_mysql_field {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MYSQL_FIELD = Struct_st_mysql_field;
pub type MYSQL_ROW = *mut *mut ::libc::c_char;
pub type MYSQL_FIELD_OFFSET = ::libc::c_uint;
pub type my_ulonglong = ::libc::c_ulonglong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_used_mem {
    pub next: *mut Struct_st_used_mem,
    pub left: size_t,
    pub size: size_t,
}
impl ::std::clone::Clone for Struct_st_used_mem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_used_mem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type USED_MEM = Struct_st_used_mem;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_mem_root {
    pub free: *mut USED_MEM,
    pub used: *mut USED_MEM,
    pub pre_alloc: *mut USED_MEM,
    pub min_malloc: size_t,
    pub block_size: size_t,
    pub block_num: ::libc::c_uint,
    pub first_block_usage: ::libc::c_uint,
    pub error_handler: ::std::option::Option<extern "C" fn() -> ()>,
}
impl ::std::clone::Clone for Struct_st_mem_root {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_mem_root {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MEM_ROOT = Struct_st_mem_root;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_typelib {
    pub count: ::libc::c_uint,
    pub name: *const ::libc::c_char,
    pub type_names: *mut *const ::libc::c_char,
    pub type_lengths: *mut ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_st_typelib {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_typelib {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TYPELIB = Struct_st_typelib;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_mysql_rows {
    pub next: *mut Struct_st_mysql_rows,
    pub data: MYSQL_ROW,
    pub length: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct_st_mysql_rows {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_mysql_rows {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MYSQL_ROWS = Struct_st_mysql_rows;
pub type MYSQL_ROW_OFFSET = *mut MYSQL_ROWS;
pub enum Struct_embedded_query_result { }
pub type EMBEDDED_QUERY_RESULT = Struct_embedded_query_result;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_mysql_data {
    pub data: *mut MYSQL_ROWS,
    pub embedded_info: *mut Struct_embedded_query_result,
    pub alloc: MEM_ROOT,
    pub rows: my_ulonglong,
    pub fields: ::libc::c_uint,
    pub extension: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_st_mysql_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_mysql_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MYSQL_DATA = Struct_st_mysql_data;
pub type Enum_mysql_option = ::libc::c_uint;
pub const MYSQL_OPT_CONNECT_TIMEOUT: ::libc::c_uint = 0;
pub const MYSQL_OPT_COMPRESS: ::libc::c_uint = 1;
pub const MYSQL_OPT_NAMED_PIPE: ::libc::c_uint = 2;
pub const MYSQL_INIT_COMMAND: ::libc::c_uint = 3;
pub const MYSQL_READ_DEFAULT_FILE: ::libc::c_uint = 4;
pub const MYSQL_READ_DEFAULT_GROUP: ::libc::c_uint = 5;
pub const MYSQL_SET_CHARSET_DIR: ::libc::c_uint = 6;
pub const MYSQL_SET_CHARSET_NAME: ::libc::c_uint = 7;
pub const MYSQL_OPT_LOCAL_INFILE: ::libc::c_uint = 8;
pub const MYSQL_OPT_PROTOCOL: ::libc::c_uint = 9;
pub const MYSQL_SHARED_MEMORY_BASE_NAME: ::libc::c_uint = 10;
pub const MYSQL_OPT_READ_TIMEOUT: ::libc::c_uint = 11;
pub const MYSQL_OPT_WRITE_TIMEOUT: ::libc::c_uint = 12;
pub const MYSQL_OPT_USE_RESULT: ::libc::c_uint = 13;
pub const MYSQL_OPT_USE_REMOTE_CONNECTION: ::libc::c_uint = 14;
pub const MYSQL_OPT_USE_EMBEDDED_CONNECTION: ::libc::c_uint = 15;
pub const MYSQL_OPT_GUESS_CONNECTION: ::libc::c_uint = 16;
pub const MYSQL_SET_CLIENT_IP: ::libc::c_uint = 17;
pub const MYSQL_SECURE_AUTH: ::libc::c_uint = 18;
pub const MYSQL_REPORT_DATA_TRUNCATION: ::libc::c_uint = 19;
pub const MYSQL_OPT_RECONNECT: ::libc::c_uint = 20;
pub const MYSQL_OPT_SSL_VERIFY_SERVER_CERT: ::libc::c_uint = 21;
pub const MYSQL_PLUGIN_DIR: ::libc::c_uint = 22;
pub const MYSQL_DEFAULT_AUTH: ::libc::c_uint = 23;
pub const MYSQL_OPT_BIND: ::libc::c_uint = 24;
pub const MYSQL_OPT_SSL_KEY: ::libc::c_uint = 25;
pub const MYSQL_OPT_SSL_CERT: ::libc::c_uint = 26;
pub const MYSQL_OPT_SSL_CA: ::libc::c_uint = 27;
pub const MYSQL_OPT_SSL_CAPATH: ::libc::c_uint = 28;
pub const MYSQL_OPT_SSL_CIPHER: ::libc::c_uint = 29;
pub const MYSQL_OPT_SSL_CRL: ::libc::c_uint = 30;
pub const MYSQL_OPT_SSL_CRLPATH: ::libc::c_uint = 31;
pub const MYSQL_OPT_CONNECT_ATTR_RESET: ::libc::c_uint = 32;
pub const MYSQL_OPT_CONNECT_ATTR_ADD: ::libc::c_uint = 33;
pub const MYSQL_OPT_CONNECT_ATTR_DELETE: ::libc::c_uint = 34;
pub const MYSQL_SERVER_PUBLIC_KEY: ::libc::c_uint = 35;
pub const MYSQL_ENABLE_CLEARTEXT_PLUGIN: ::libc::c_uint = 36;
pub const MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS: ::libc::c_uint = 37;
pub const MYSQL_PROGRESS_CALLBACK: ::libc::c_uint = 5999;
pub const MYSQL_OPT_NONBLOCK: ::libc::c_uint = 6000;
pub const MYSQL_OPT_USE_THREAD_SPECIFIC_MEMORY: ::libc::c_uint = 6001;
pub enum Struct_st_mysql_options_extention { }
pub enum Struct_st_dynamic_array { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_mysql_options {
    pub connect_timeout: ::libc::c_uint,
    pub read_timeout: ::libc::c_uint,
    pub write_timeout: ::libc::c_uint,
    pub port: ::libc::c_uint,
    pub protocol: ::libc::c_uint,
    pub client_flag: ::libc::c_ulong,
    pub host: *mut ::libc::c_char,
    pub user: *mut ::libc::c_char,
    pub password: *mut ::libc::c_char,
    pub unix_socket: *mut ::libc::c_char,
    pub db: *mut ::libc::c_char,
    pub init_commands: *mut Struct_st_dynamic_array,
    pub my_cnf_file: *mut ::libc::c_char,
    pub my_cnf_group: *mut ::libc::c_char,
    pub charset_dir: *mut ::libc::c_char,
    pub charset_name: *mut ::libc::c_char,
    pub ssl_key: *mut ::libc::c_char,
    pub ssl_cert: *mut ::libc::c_char,
    pub ssl_ca: *mut ::libc::c_char,
    pub ssl_capath: *mut ::libc::c_char,
    pub ssl_cipher: *mut ::libc::c_char,
    pub shared_memory_base_name: *mut ::libc::c_char,
    pub max_allowed_packet: ::libc::c_ulong,
    pub use_ssl: my_bool,
    pub compress: my_bool,
    pub named_pipe: my_bool,
    pub use_thread_specific_memory: my_bool,
    pub unused2: my_bool,
    pub unused3: my_bool,
    pub unused4: my_bool,
    pub methods_to_use: Enum_mysql_option,
    pub client_ip: *mut ::libc::c_char,
    pub secure_auth: my_bool,
    pub report_data_truncation: my_bool,
    pub local_infile_init: ::std::option::Option<extern "C" fn(arg1:
                                                                   *mut *mut ::libc::c_void,
                                                               arg2:
                                                                   *const ::libc::c_char,
                                                               arg3:
                                                                   *mut ::libc::c_void)
                                                     -> ::libc::c_int>,
    pub local_infile_read: ::std::option::Option<extern "C" fn(arg1:
                                                                   *mut ::libc::c_void,
                                                               arg2:
                                                                   *mut ::libc::c_char,
                                                               arg3:
                                                                   ::libc::c_uint)
                                                     -> ::libc::c_int>,
    pub local_infile_end: ::std::option::Option<extern "C" fn(arg1:
                                                                  *mut ::libc::c_void)
                                                    -> ()>,
    pub local_infile_error: ::std::option::Option<extern "C" fn(arg1:
                                                                    *mut ::libc::c_void,
                                                                arg2:
                                                                    *mut ::libc::c_char,
                                                                arg3:
                                                                    ::libc::c_uint)
                                                      -> ::libc::c_int>,
    pub local_infile_userdata: *mut ::libc::c_void,
    pub extension: *mut Struct_st_mysql_options_extention,
}
impl ::std::clone::Clone for Struct_st_mysql_options {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_mysql_options {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_mysql_status = ::libc::c_uint;
pub const MYSQL_STATUS_READY: ::libc::c_uint = 0;
pub const MYSQL_STATUS_GET_RESULT: ::libc::c_uint = 1;
pub const MYSQL_STATUS_USE_RESULT: ::libc::c_uint = 2;
pub const MYSQL_STATUS_STATEMENT_GET_RESULT: ::libc::c_uint = 3;
pub type Enum_mysql_protocol_type = ::libc::c_uint;
pub const MYSQL_PROTOCOL_DEFAULT: ::libc::c_uint = 0;
pub const MYSQL_PROTOCOL_TCP: ::libc::c_uint = 1;
pub const MYSQL_PROTOCOL_SOCKET: ::libc::c_uint = 2;
pub const MYSQL_PROTOCOL_PIPE: ::libc::c_uint = 3;
pub const MYSQL_PROTOCOL_MEMORY: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_character_set {
    pub number: ::libc::c_uint,
    pub state: ::libc::c_uint,
    pub csname: *const ::libc::c_char,
    pub name: *const ::libc::c_char,
    pub comment: *const ::libc::c_char,
    pub dir: *const ::libc::c_char,
    pub mbminlen: ::libc::c_uint,
    pub mbmaxlen: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_character_set {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_character_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MY_CHARSET_INFO = Struct_character_set;
pub enum Struct_st_mysql_methods { }
pub enum Struct_charset_info_st { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_mysql {
    pub net: NET,
    pub connector_fd: *mut ::libc::c_uchar,
    pub host: *mut ::libc::c_char,
    pub user: *mut ::libc::c_char,
    pub passwd: *mut ::libc::c_char,
    pub unix_socket: *mut ::libc::c_char,
    pub server_version: *mut ::libc::c_char,
    pub host_info: *mut ::libc::c_char,
    pub info: *mut ::libc::c_char,
    pub db: *mut ::libc::c_char,
    pub charset: *const Struct_charset_info_st,
    pub fields: *mut MYSQL_FIELD,
    pub field_alloc: MEM_ROOT,
    pub affected_rows: my_ulonglong,
    pub insert_id: my_ulonglong,
    pub extra_info: my_ulonglong,
    pub thread_id: ::libc::c_ulong,
    pub packet_length: ::libc::c_ulong,
    pub port: ::libc::c_uint,
    pub client_flag: ::libc::c_ulong,
    pub server_capabilities: ::libc::c_ulong,
    pub protocol_version: ::libc::c_uint,
    pub field_count: ::libc::c_uint,
    pub server_status: ::libc::c_uint,
    pub server_language: ::libc::c_uint,
    pub warning_count: ::libc::c_uint,
    pub options: Struct_st_mysql_options,
    pub status: Enum_mysql_status,
    pub free_me: my_bool,
    pub reconnect: my_bool,
    pub scramble: [::libc::c_char; 21usize],
    pub unused1: my_bool,
    pub unused2: *mut ::libc::c_void,
    pub unused3: *mut ::libc::c_void,
    pub unused4: *mut ::libc::c_void,
    pub unused5: *mut ::libc::c_void,
    pub stmts: *mut LIST,
    pub methods: *const Struct_st_mysql_methods,
    pub thd: *mut ::libc::c_void,
    pub unbuffered_fetch_owner: *mut my_bool,
    pub info_buffer: *mut ::libc::c_char,
    pub extension: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_st_mysql {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_mysql {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MYSQL = Struct_st_mysql;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_mysql_res {
    pub row_count: my_ulonglong,
    pub fields: *mut MYSQL_FIELD,
    pub data: *mut MYSQL_DATA,
    pub data_cursor: *mut MYSQL_ROWS,
    pub lengths: *mut ::libc::c_ulong,
    pub handle: *mut MYSQL,
    pub methods: *const Struct_st_mysql_methods,
    pub row: MYSQL_ROW,
    pub current_row: MYSQL_ROW,
    pub field_alloc: MEM_ROOT,
    pub field_count: ::libc::c_uint,
    pub current_field: ::libc::c_uint,
    pub eof: my_bool,
    pub unbuffered_fetch_cancelled: my_bool,
    pub extension: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_st_mysql_res {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_mysql_res {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MYSQL_RES = Struct_st_mysql_res;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_mysql_parameters {
    pub p_max_allowed_packet: *mut ::libc::c_ulong,
    pub p_net_buffer_length: *mut ::libc::c_ulong,
    pub extension: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_st_mysql_parameters {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_mysql_parameters {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MYSQL_PARAMETERS = Struct_st_mysql_parameters;
pub type Enum_enum_mysql_stmt_state = ::libc::c_uint;
pub const MYSQL_STMT_INIT_DONE: ::libc::c_uint = 1;
pub const MYSQL_STMT_PREPARE_DONE: ::libc::c_uint = 2;
pub const MYSQL_STMT_EXECUTE_DONE: ::libc::c_uint = 3;
pub const MYSQL_STMT_FETCH_DONE: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_mysql_bind {
    pub length: *mut ::libc::c_ulong,
    pub is_null: *mut my_bool,
    pub buffer: *mut ::libc::c_void,
    pub error: *mut my_bool,
    pub row_ptr: *mut ::libc::c_uchar,
    pub store_param_func: ::std::option::Option<extern "C" fn(net: *mut NET,
                                                              param:
                                                                  *mut Struct_st_mysql_bind)
                                                    -> ()>,
    pub fetch_result: ::std::option::Option<extern "C" fn(arg1:
                                                              *mut Struct_st_mysql_bind,
                                                          arg2:
                                                              *mut MYSQL_FIELD,
                                                          row:
                                                              *mut *mut ::libc::c_uchar)
                                                -> ()>,
    pub skip_result: ::std::option::Option<extern "C" fn(arg1:
                                                             *mut Struct_st_mysql_bind,
                                                         arg2:
                                                             *mut MYSQL_FIELD,
                                                         row:
                                                             *mut *mut ::libc::c_uchar)
                                               -> ()>,
    pub buffer_length: ::libc::c_ulong,
    pub offset: ::libc::c_ulong,
    pub length_value: ::libc::c_ulong,
    pub param_number: ::libc::c_uint,
    pub pack_length: ::libc::c_uint,
    pub buffer_type: Enum_enum_field_types,
    pub error_value: my_bool,
    pub is_unsigned: my_bool,
    pub long_data_used: my_bool,
    pub is_null_value: my_bool,
    pub extension: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_st_mysql_bind {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_mysql_bind {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MYSQL_BIND = Struct_st_mysql_bind;
pub enum Struct_st_mysql_stmt_extension { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_st_mysql_stmt {
    pub mem_root: MEM_ROOT,
    pub list: LIST,
    pub mysql: *mut MYSQL,
    pub params: *mut MYSQL_BIND,
    pub bind: *mut MYSQL_BIND,
    pub fields: *mut MYSQL_FIELD,
    pub result: MYSQL_DATA,
    pub data_cursor: *mut MYSQL_ROWS,
    pub read_row_func: ::std::option::Option<extern "C" fn(stmt:
                                                               *mut Struct_st_mysql_stmt,
                                                           row:
                                                               *mut *mut ::libc::c_uchar)
                                                 -> ::libc::c_int>,
    pub affected_rows: my_ulonglong,
    pub insert_id: my_ulonglong,
    pub stmt_id: ::libc::c_ulong,
    pub flags: ::libc::c_ulong,
    pub prefetch_rows: ::libc::c_ulong,
    pub server_status: ::libc::c_uint,
    pub last_errno: ::libc::c_uint,
    pub param_count: ::libc::c_uint,
    pub field_count: ::libc::c_uint,
    pub state: Enum_enum_mysql_stmt_state,
    pub last_error: [::libc::c_char; 512usize],
    pub sqlstate: [::libc::c_char; 6usize],
    pub send_types_to_server: my_bool,
    pub bind_param_done: my_bool,
    pub bind_result_done: ::libc::c_uchar,
    pub unbuffered_fetch_cancelled: my_bool,
    pub update_max_length: my_bool,
    pub extension: *mut Struct_st_mysql_stmt_extension,
}
impl ::std::clone::Clone for Struct_st_mysql_stmt {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_st_mysql_stmt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MYSQL_STMT = Struct_st_mysql_stmt;
pub type Enum_enum_stmt_attr_type = ::libc::c_uint;
pub const STMT_ATTR_UPDATE_MAX_LENGTH: ::libc::c_uint = 0;
pub const STMT_ATTR_CURSOR_TYPE: ::libc::c_uint = 1;
pub const STMT_ATTR_PREFETCH_ROWS: ::libc::c_uint = 2;
#[link(name = "mysqlclient")]
extern "C" {
    pub static mut mariadb_deinitialize_ssl: ::libc::c_uint;
    pub static mut mysql_port: ::libc::c_uint;
    pub static mut mysql_unix_port: *mut ::libc::c_char;
    pub static mut sql_protocol_typelib: TYPELIB;
}
#[link(name = "mysqlclient")]
extern "C" {
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn my_net_init(net: *mut NET, vio: *mut Vio, my_flags: ::libc::c_uint)
     -> my_bool;
    pub fn my_net_local_init(net: *mut NET) -> ();
    pub fn net_end(net: *mut NET) -> ();
    pub fn net_clear(net: *mut NET, clear_buffer: my_bool) -> ();
    pub fn net_realloc(net: *mut NET, length: size_t) -> my_bool;
    pub fn net_flush(net: *mut NET) -> my_bool;
    pub fn my_net_write(net: *mut NET, packet: *const ::libc::c_uchar,
                        len: size_t) -> my_bool;
    pub fn net_write_command(net: *mut NET, command: ::libc::c_uchar,
                             header: *const ::libc::c_uchar, head_len: size_t,
                             packet: *const ::libc::c_uchar, len: size_t)
     -> my_bool;
    pub fn net_real_write(net: *mut NET, packet: *const ::libc::c_uchar,
                          len: size_t) -> ::libc::c_int;
    pub fn my_net_read_packet(net: *mut NET, read_from_server: my_bool)
     -> ::libc::c_ulong;
    pub fn my_connect(s: my_socket, name: *const Struct_sockaddr,
                      namelen: ::libc::c_uint, timeout: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn create_random_string(to: *mut ::libc::c_char,
                                length: ::libc::c_uint,
                                rand_st: *mut Struct_my_rnd_struct) -> ();
    pub fn hash_password(to: *mut ::libc::c_ulong,
                         password: *const ::libc::c_char,
                         password_len: ::libc::c_uint) -> ();
    pub fn make_scrambled_password_323(to: *mut ::libc::c_char,
                                       password: *const ::libc::c_char) -> ();
    pub fn scramble_323(to: *mut ::libc::c_char,
                        message: *const ::libc::c_char,
                        password: *const ::libc::c_char) -> ();
    pub fn check_scramble_323(reply: *const ::libc::c_uchar,
                              message: *const ::libc::c_char,
                              salt: *mut ::libc::c_ulong) -> my_bool;
    pub fn get_salt_from_password_323(res: *mut ::libc::c_ulong,
                                      password: *const ::libc::c_char) -> ();
    pub fn make_password_from_salt_323(to: *mut ::libc::c_char,
                                       salt: *const ::libc::c_ulong) -> ();
    pub fn make_scrambled_password(to: *mut ::libc::c_char,
                                   password: *const ::libc::c_char) -> ();
    pub fn scramble(to: *mut ::libc::c_char, message: *const ::libc::c_char,
                    password: *const ::libc::c_char) -> ();
    pub fn check_scramble(reply: *const ::libc::c_uchar,
                          message: *const ::libc::c_char,
                          hash_stage2: *const ::libc::c_uchar) -> my_bool;
    pub fn get_salt_from_password(res: *mut ::libc::c_uchar,
                                  password: *const ::libc::c_char) -> ();
    pub fn make_password_from_salt(to: *mut ::libc::c_char,
                                   hash_stage2: *const ::libc::c_uchar) -> ();
    pub fn octet2hex(to: *mut ::libc::c_char, str: *const ::libc::c_char,
                     len: ::libc::c_uint) -> *mut ::libc::c_char;
    pub fn get_tty_password(opt_message: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn get_tty_password_buff(opt_message: *const ::libc::c_char,
                                 to: *mut ::libc::c_char, length: size_t)
     -> ();
    pub fn mysql_errno_to_sqlstate(mysql_errno: ::libc::c_uint)
     -> *const ::libc::c_char;
    pub fn my_thread_init() -> my_bool;
    pub fn my_thread_end() -> ();
    pub fn list_add(root: *mut LIST, element: *mut LIST) -> *mut LIST;
    pub fn list_delete(root: *mut LIST, element: *mut LIST) -> *mut LIST;
    pub fn list_cons(data: *mut ::libc::c_void, root: *mut LIST) -> *mut LIST;
    pub fn list_reverse(root: *mut LIST) -> *mut LIST;
    pub fn list_free(root: *mut LIST, free_data: ::libc::c_uint) -> ();
    pub fn list_length(arg1: *mut LIST) -> ::libc::c_uint;
    pub fn list_walk(arg1: *mut LIST, action: list_walk_action,
                     argument: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn find_typeset(x: *mut ::libc::c_char, typelib: *mut TYPELIB,
                        error_position: *mut ::libc::c_int) -> my_ulonglong;
    pub fn find_type_with_warning(x: *const ::libc::c_char,
                                  typelib: *mut TYPELIB,
                                  option: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn find_type_or_exit(x: *const ::libc::c_char, typelib: *mut TYPELIB,
                             option: *const ::libc::c_char) -> ::libc::c_int;
    pub fn find_type(x: *const ::libc::c_char, typelib: *const TYPELIB,
                     flags: ::libc::c_uint) -> ::libc::c_int;
    pub fn make_type(to: *mut ::libc::c_char, nr: ::libc::c_uint,
                     typelib: *mut TYPELIB) -> ();
    pub fn get_type(typelib: *mut TYPELIB, nr: ::libc::c_uint)
     -> *const ::libc::c_char;
    pub fn copy_typelib(root: *mut MEM_ROOT, from: *mut TYPELIB)
     -> *mut TYPELIB;
    pub fn find_set_from_flags(lib: *const TYPELIB,
                               default_name: ::libc::c_uint,
                               cur_set: my_ulonglong,
                               default_set: my_ulonglong,
                               str: *const ::libc::c_char,
                               length: ::libc::c_uint,
                               err_pos: *mut *mut ::libc::c_char,
                               err_len: *mut ::libc::c_uint) -> my_ulonglong;
    pub fn mysql_server_init(argc: ::libc::c_int,
                             argv: *mut *mut ::libc::c_char,
                             groups: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn mysql_server_end() -> ();
    pub fn mysql_get_parameters() -> *mut MYSQL_PARAMETERS;
    pub fn mysql_thread_init() -> my_bool;
    pub fn mysql_thread_end() -> ();
    pub fn mysql_num_rows(res: *mut MYSQL_RES) -> my_ulonglong;
    pub fn mysql_num_fields(res: *mut MYSQL_RES) -> ::libc::c_uint;
    pub fn mysql_eof(res: *mut MYSQL_RES) -> my_bool;
    pub fn mysql_fetch_field_direct(res: *mut MYSQL_RES,
                                    fieldnr: ::libc::c_uint)
     -> *mut MYSQL_FIELD;
    pub fn mysql_fetch_fields(res: *mut MYSQL_RES) -> *mut MYSQL_FIELD;
    pub fn mysql_row_tell(res: *mut MYSQL_RES) -> MYSQL_ROW_OFFSET;
    pub fn mysql_field_tell(res: *mut MYSQL_RES) -> MYSQL_FIELD_OFFSET;
    pub fn mysql_field_count(mysql: *mut MYSQL) -> ::libc::c_uint;
    pub fn mysql_affected_rows(mysql: *mut MYSQL) -> my_ulonglong;
    pub fn mysql_insert_id(mysql: *mut MYSQL) -> my_ulonglong;
    pub fn mysql_errno(mysql: *mut MYSQL) -> ::libc::c_uint;
    pub fn mysql_error(mysql: *mut MYSQL) -> *const ::libc::c_char;
    pub fn mysql_sqlstate(mysql: *mut MYSQL) -> *const ::libc::c_char;
    pub fn mysql_warning_count(mysql: *mut MYSQL) -> ::libc::c_uint;
    pub fn mysql_info(mysql: *mut MYSQL) -> *const ::libc::c_char;
    pub fn mysql_thread_id(mysql: *mut MYSQL) -> ::libc::c_ulong;
    pub fn mysql_character_set_name(mysql: *mut MYSQL)
     -> *const ::libc::c_char;
    pub fn mysql_set_character_set(mysql: *mut MYSQL,
                                   csname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mysql_set_character_set_start(ret: *mut ::libc::c_int,
                                         mysql: *mut MYSQL,
                                         csname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mysql_set_character_set_cont(ret: *mut ::libc::c_int,
                                        mysql: *mut MYSQL,
                                        status: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mysql_init(mysql: *mut MYSQL) -> *mut MYSQL;
    pub fn mysql_ssl_set(mysql: *mut MYSQL, key: *const ::libc::c_char,
                         cert: *const ::libc::c_char,
                         ca: *const ::libc::c_char,
                         capath: *const ::libc::c_char,
                         cipher: *const ::libc::c_char) -> my_bool;
    pub fn mysql_get_ssl_cipher(mysql: *mut MYSQL) -> *const ::libc::c_char;
    pub fn mysql_change_user(mysql: *mut MYSQL, user: *const ::libc::c_char,
                             passwd: *const ::libc::c_char,
                             db: *const ::libc::c_char) -> my_bool;
    pub fn mysql_change_user_start(ret: *mut my_bool, mysql: *mut MYSQL,
                                   user: *const ::libc::c_char,
                                   passwd: *const ::libc::c_char,
                                   db: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mysql_change_user_cont(ret: *mut my_bool, mysql: *mut MYSQL,
                                  status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_real_connect(mysql: *mut MYSQL, host: *const ::libc::c_char,
                              user: *const ::libc::c_char,
                              passwd: *const ::libc::c_char,
                              db: *const ::libc::c_char, port: ::libc::c_uint,
                              unix_socket: *const ::libc::c_char,
                              clientflag: ::libc::c_ulong) -> *mut MYSQL;
    pub fn mysql_real_connect_start(ret: *mut *mut MYSQL, mysql: *mut MYSQL,
                                    host: *const ::libc::c_char,
                                    user: *const ::libc::c_char,
                                    passwd: *const ::libc::c_char,
                                    db: *const ::libc::c_char,
                                    port: ::libc::c_uint,
                                    unix_socket: *const ::libc::c_char,
                                    clientflag: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn mysql_real_connect_cont(ret: *mut *mut MYSQL, mysql: *mut MYSQL,
                                   status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_select_db(mysql: *mut MYSQL, db: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mysql_select_db_start(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                                 db: *const ::libc::c_char) -> ::libc::c_int;
    pub fn mysql_select_db_cont(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                                status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_query(mysql: *mut MYSQL, q: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mysql_query_start(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                             q: *const ::libc::c_char) -> ::libc::c_int;
    pub fn mysql_query_cont(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                            status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_send_query(mysql: *mut MYSQL, q: *const ::libc::c_char,
                            length: ::libc::c_ulong) -> ::libc::c_int;
    pub fn mysql_send_query_start(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                                  q: *const ::libc::c_char,
                                  length: ::libc::c_ulong) -> ::libc::c_int;
    pub fn mysql_send_query_cont(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                                 status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_real_query(mysql: *mut MYSQL, q: *const ::libc::c_char,
                            length: ::libc::c_ulong) -> ::libc::c_int;
    pub fn mysql_real_query_start(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                                  q: *const ::libc::c_char,
                                  length: ::libc::c_ulong) -> ::libc::c_int;
    pub fn mysql_real_query_cont(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                                 status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_store_result(mysql: *mut MYSQL) -> *mut MYSQL_RES;
    pub fn mysql_store_result_start(ret: *mut *mut MYSQL_RES,
                                    mysql: *mut MYSQL) -> ::libc::c_int;
    pub fn mysql_store_result_cont(ret: *mut *mut MYSQL_RES,
                                   mysql: *mut MYSQL, status: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mysql_use_result(mysql: *mut MYSQL) -> *mut MYSQL_RES;
    pub fn mysql_get_character_set_info(mysql: *mut MYSQL,
                                        charset: *mut MY_CHARSET_INFO) -> ();
    pub fn mysql_set_local_infile_handler(mysql: *mut MYSQL,
                                          local_infile_init:
                                              ::std::option::Option<extern "C" fn(arg1:
                                                                                      *mut *mut ::libc::c_void,
                                                                                  arg2:
                                                                                      *const ::libc::c_char,
                                                                                  arg3:
                                                                                      *mut ::libc::c_void)
                                                                        ->
                                                                            ::libc::c_int>,
                                          local_infile_read:
                                              ::std::option::Option<extern "C" fn(arg1:
                                                                                      *mut ::libc::c_void,
                                                                                  arg2:
                                                                                      *mut ::libc::c_char,
                                                                                  arg3:
                                                                                      ::libc::c_uint)
                                                                        ->
                                                                            ::libc::c_int>,
                                          local_infile_end:
                                              ::std::option::Option<extern "C" fn(arg1:
                                                                                      *mut ::libc::c_void)
                                                                        ->
                                                                            ()>,
                                          local_infile_error:
                                              ::std::option::Option<extern "C" fn(arg1:
                                                                                      *mut ::libc::c_void,
                                                                                  arg2:
                                                                                      *mut ::libc::c_char,
                                                                                  arg3:
                                                                                      ::libc::c_uint)
                                                                        ->
                                                                            ::libc::c_int>,
                                          arg1: *mut ::libc::c_void) -> ();
    pub fn mysql_set_local_infile_default(mysql: *mut MYSQL) -> ();
    pub fn mysql_shutdown(mysql: *mut MYSQL,
                          shutdown_level: Enum_mysql_enum_shutdown_level)
     -> ::libc::c_int;
    pub fn mysql_shutdown_start(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                                shutdown_level:
                                    Enum_mysql_enum_shutdown_level)
     -> ::libc::c_int;
    pub fn mysql_shutdown_cont(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                               status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_dump_debug_info(mysql: *mut MYSQL) -> ::libc::c_int;
    pub fn mysql_dump_debug_info_start(ret: *mut ::libc::c_int,
                                       mysql: *mut MYSQL) -> ::libc::c_int;
    pub fn mysql_dump_debug_info_cont(ret: *mut ::libc::c_int,
                                      mysql: *mut MYSQL,
                                      status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_refresh(mysql: *mut MYSQL, refresh_options: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn mysql_refresh_start(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                               refresh_options: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn mysql_refresh_cont(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                              status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_kill(mysql: *mut MYSQL, pid: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn mysql_kill_start(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                            pid: ::libc::c_ulong) -> ::libc::c_int;
    pub fn mysql_kill_cont(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                           status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_set_server_option(mysql: *mut MYSQL,
                                   option: Enum_enum_mysql_set_option)
     -> ::libc::c_int;
    pub fn mysql_set_server_option_start(ret: *mut ::libc::c_int,
                                         mysql: *mut MYSQL,
                                         option: Enum_enum_mysql_set_option)
     -> ::libc::c_int;
    pub fn mysql_set_server_option_cont(ret: *mut ::libc::c_int,
                                        mysql: *mut MYSQL,
                                        status: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mysql_ping(mysql: *mut MYSQL) -> ::libc::c_int;
    pub fn mysql_ping_start(ret: *mut ::libc::c_int, mysql: *mut MYSQL)
     -> ::libc::c_int;
    pub fn mysql_ping_cont(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                           status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_stat(mysql: *mut MYSQL) -> *const ::libc::c_char;
    pub fn mysql_stat_start(ret: *mut *const ::libc::c_char,
                            mysql: *mut MYSQL) -> ::libc::c_int;
    pub fn mysql_stat_cont(ret: *mut *const ::libc::c_char, mysql: *mut MYSQL,
                           status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_get_server_info(mysql: *mut MYSQL) -> *const ::libc::c_char;
    pub fn mysql_get_server_name(mysql: *mut MYSQL) -> *const ::libc::c_char;
    pub fn mysql_get_client_info() -> *const ::libc::c_char;
    pub fn mysql_get_client_version() -> ::libc::c_ulong;
    pub fn mysql_get_host_info(mysql: *mut MYSQL) -> *const ::libc::c_char;
    pub fn mysql_get_server_version(mysql: *mut MYSQL) -> ::libc::c_ulong;
    pub fn mysql_get_proto_info(mysql: *mut MYSQL) -> ::libc::c_uint;
    pub fn mysql_list_dbs(mysql: *mut MYSQL, wild: *const ::libc::c_char)
     -> *mut MYSQL_RES;
    pub fn mysql_list_dbs_start(ret: *mut *mut MYSQL_RES, mysql: *mut MYSQL,
                                wild: *const ::libc::c_char) -> ::libc::c_int;
    pub fn mysql_list_dbs_cont(ret: *mut *mut MYSQL_RES, mysql: *mut MYSQL,
                               status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_list_tables(mysql: *mut MYSQL, wild: *const ::libc::c_char)
     -> *mut MYSQL_RES;
    pub fn mysql_list_tables_start(ret: *mut *mut MYSQL_RES,
                                   mysql: *mut MYSQL,
                                   wild: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mysql_list_tables_cont(ret: *mut *mut MYSQL_RES, mysql: *mut MYSQL,
                                  status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_list_processes(mysql: *mut MYSQL) -> *mut MYSQL_RES;
    pub fn mysql_list_processes_start(ret: *mut *mut MYSQL_RES,
                                      mysql: *mut MYSQL) -> ::libc::c_int;
    pub fn mysql_list_processes_cont(ret: *mut *mut MYSQL_RES,
                                     mysql: *mut MYSQL, status: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mysql_options(mysql: *mut MYSQL, option: Enum_mysql_option,
                         arg: *const ::libc::c_void) -> ::libc::c_int;
    pub fn mysql_options4(mysql: *mut MYSQL, option: Enum_mysql_option,
                          arg1: *const ::libc::c_void,
                          arg2: *const ::libc::c_void) -> ::libc::c_int;
    pub fn mysql_free_result(result: *mut MYSQL_RES) -> ();
    pub fn mysql_free_result_start(result: *mut MYSQL_RES) -> ::libc::c_int;
    pub fn mysql_free_result_cont(result: *mut MYSQL_RES,
                                  status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_data_seek(result: *mut MYSQL_RES, offset: my_ulonglong)
     -> ();
    pub fn mysql_row_seek(result: *mut MYSQL_RES, offset: MYSQL_ROW_OFFSET)
     -> MYSQL_ROW_OFFSET;
    pub fn mysql_field_seek(result: *mut MYSQL_RES,
                            offset: MYSQL_FIELD_OFFSET) -> MYSQL_FIELD_OFFSET;
    pub fn mysql_fetch_row(result: *mut MYSQL_RES) -> MYSQL_ROW;
    pub fn mysql_fetch_row_start(ret: *mut MYSQL_ROW, result: *mut MYSQL_RES)
     -> ::libc::c_int;
    pub fn mysql_fetch_row_cont(ret: *mut MYSQL_ROW, result: *mut MYSQL_RES,
                                status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_fetch_lengths(result: *mut MYSQL_RES)
     -> *mut ::libc::c_ulong;
    pub fn mysql_fetch_field(result: *mut MYSQL_RES) -> *mut MYSQL_FIELD;
    pub fn mysql_list_fields(mysql: *mut MYSQL, table: *const ::libc::c_char,
                             wild: *const ::libc::c_char) -> *mut MYSQL_RES;
    pub fn mysql_list_fields_start(ret: *mut *mut MYSQL_RES,
                                   mysql: *mut MYSQL,
                                   table: *const ::libc::c_char,
                                   wild: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mysql_list_fields_cont(ret: *mut *mut MYSQL_RES, mysql: *mut MYSQL,
                                  status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_escape_string(to: *mut ::libc::c_char,
                               from: *const ::libc::c_char,
                               from_length: ::libc::c_ulong)
     -> ::libc::c_ulong;
    pub fn mysql_hex_string(to: *mut ::libc::c_char,
                            from: *const ::libc::c_char,
                            from_length: ::libc::c_ulong) -> ::libc::c_ulong;
    pub fn mysql_real_escape_string(mysql: *mut MYSQL,
                                    to: *mut ::libc::c_char,
                                    from: *const ::libc::c_char,
                                    length: ::libc::c_ulong)
     -> ::libc::c_ulong;
    pub fn mysql_debug(debug: *const ::libc::c_char) -> ();
    pub fn myodbc_remove_escape(mysql: *mut MYSQL, name: *mut ::libc::c_char)
     -> ();
    pub fn mysql_thread_safe() -> ::libc::c_uint;
    pub fn mysql_embedded() -> my_bool;
    pub fn mariadb_connection(mysql: *mut MYSQL) -> my_bool;
    pub fn mysql_read_query_result(mysql: *mut MYSQL) -> my_bool;
    pub fn mysql_read_query_result_start(ret: *mut my_bool, mysql: *mut MYSQL)
     -> ::libc::c_int;
    pub fn mysql_read_query_result_cont(ret: *mut my_bool, mysql: *mut MYSQL,
                                        status: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mysql_stmt_init(mysql: *mut MYSQL) -> *mut MYSQL_STMT;
    pub fn mysql_stmt_prepare(stmt: *mut MYSQL_STMT,
                              query: *const ::libc::c_char,
                              length: ::libc::c_ulong) -> ::libc::c_int;
    pub fn mysql_stmt_prepare_start(ret: *mut ::libc::c_int,
                                    stmt: *mut MYSQL_STMT,
                                    query: *const ::libc::c_char,
                                    length: ::libc::c_ulong) -> ::libc::c_int;
    pub fn mysql_stmt_prepare_cont(ret: *mut ::libc::c_int,
                                   stmt: *mut MYSQL_STMT,
                                   status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_stmt_execute(stmt: *mut MYSQL_STMT) -> ::libc::c_int;
    pub fn mysql_stmt_execute_start(ret: *mut ::libc::c_int,
                                    stmt: *mut MYSQL_STMT) -> ::libc::c_int;
    pub fn mysql_stmt_execute_cont(ret: *mut ::libc::c_int,
                                   stmt: *mut MYSQL_STMT,
                                   status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_stmt_fetch(stmt: *mut MYSQL_STMT) -> ::libc::c_int;
    pub fn mysql_stmt_fetch_start(ret: *mut ::libc::c_int,
                                  stmt: *mut MYSQL_STMT) -> ::libc::c_int;
    pub fn mysql_stmt_fetch_cont(ret: *mut ::libc::c_int,
                                 stmt: *mut MYSQL_STMT, status: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mysql_stmt_fetch_column(stmt: *mut MYSQL_STMT,
                                   bind_arg: *mut MYSQL_BIND,
                                   column: ::libc::c_uint,
                                   offset: ::libc::c_ulong) -> ::libc::c_int;
    pub fn mysql_stmt_store_result(stmt: *mut MYSQL_STMT) -> ::libc::c_int;
    pub fn mysql_stmt_store_result_start(ret: *mut ::libc::c_int,
                                         stmt: *mut MYSQL_STMT)
     -> ::libc::c_int;
    pub fn mysql_stmt_store_result_cont(ret: *mut ::libc::c_int,
                                        stmt: *mut MYSQL_STMT,
                                        status: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mysql_stmt_param_count(stmt: *mut MYSQL_STMT) -> ::libc::c_ulong;
    pub fn mysql_stmt_attr_set(stmt: *mut MYSQL_STMT,
                               attr_type: Enum_enum_stmt_attr_type,
                               attr: *const ::libc::c_void) -> my_bool;
    pub fn mysql_stmt_attr_get(stmt: *mut MYSQL_STMT,
                               attr_type: Enum_enum_stmt_attr_type,
                               attr: *mut ::libc::c_void) -> my_bool;
    pub fn mysql_stmt_bind_param(stmt: *mut MYSQL_STMT, bnd: *mut MYSQL_BIND)
     -> my_bool;
    pub fn mysql_stmt_bind_result(stmt: *mut MYSQL_STMT, bnd: *mut MYSQL_BIND)
     -> my_bool;
    pub fn mysql_stmt_close(stmt: *mut MYSQL_STMT) -> my_bool;
    pub fn mysql_stmt_close_start(ret: *mut my_bool, stmt: *mut MYSQL_STMT)
     -> ::libc::c_int;
    pub fn mysql_stmt_close_cont(ret: *mut my_bool, stmt: *mut MYSQL_STMT,
                                 status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_stmt_reset(stmt: *mut MYSQL_STMT) -> my_bool;
    pub fn mysql_stmt_reset_start(ret: *mut my_bool, stmt: *mut MYSQL_STMT)
     -> ::libc::c_int;
    pub fn mysql_stmt_reset_cont(ret: *mut my_bool, stmt: *mut MYSQL_STMT,
                                 status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_stmt_free_result(stmt: *mut MYSQL_STMT) -> my_bool;
    pub fn mysql_stmt_free_result_start(ret: *mut my_bool,
                                        stmt: *mut MYSQL_STMT)
     -> ::libc::c_int;
    pub fn mysql_stmt_free_result_cont(ret: *mut my_bool,
                                       stmt: *mut MYSQL_STMT,
                                       status: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mysql_stmt_send_long_data(stmt: *mut MYSQL_STMT,
                                     param_number: ::libc::c_uint,
                                     data: *const ::libc::c_char,
                                     length: ::libc::c_ulong) -> my_bool;
    pub fn mysql_stmt_send_long_data_start(ret: *mut my_bool,
                                           stmt: *mut MYSQL_STMT,
                                           param_number: ::libc::c_uint,
                                           data: *const ::libc::c_char,
                                           len: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn mysql_stmt_send_long_data_cont(ret: *mut my_bool,
                                          stmt: *mut MYSQL_STMT,
                                          status: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mysql_stmt_result_metadata(stmt: *mut MYSQL_STMT)
     -> *mut MYSQL_RES;
    pub fn mysql_stmt_param_metadata(stmt: *mut MYSQL_STMT) -> *mut MYSQL_RES;
    pub fn mysql_stmt_errno(stmt: *mut MYSQL_STMT) -> ::libc::c_uint;
    pub fn mysql_stmt_error(stmt: *mut MYSQL_STMT) -> *const ::libc::c_char;
    pub fn mysql_stmt_sqlstate(stmt: *mut MYSQL_STMT)
     -> *const ::libc::c_char;
    pub fn mysql_stmt_row_seek(stmt: *mut MYSQL_STMT,
                               offset: MYSQL_ROW_OFFSET) -> MYSQL_ROW_OFFSET;
    pub fn mysql_stmt_row_tell(stmt: *mut MYSQL_STMT) -> MYSQL_ROW_OFFSET;
    pub fn mysql_stmt_data_seek(stmt: *mut MYSQL_STMT, offset: my_ulonglong)
     -> ();
    pub fn mysql_stmt_num_rows(stmt: *mut MYSQL_STMT) -> my_ulonglong;
    pub fn mysql_stmt_affected_rows(stmt: *mut MYSQL_STMT) -> my_ulonglong;
    pub fn mysql_stmt_insert_id(stmt: *mut MYSQL_STMT) -> my_ulonglong;
    pub fn mysql_stmt_field_count(stmt: *mut MYSQL_STMT) -> ::libc::c_uint;
    pub fn mysql_commit(mysql: *mut MYSQL) -> my_bool;
    pub fn mysql_commit_start(ret: *mut my_bool, mysql: *mut MYSQL)
     -> ::libc::c_int;
    pub fn mysql_commit_cont(ret: *mut my_bool, mysql: *mut MYSQL,
                             status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_rollback(mysql: *mut MYSQL) -> my_bool;
    pub fn mysql_rollback_start(ret: *mut my_bool, mysql: *mut MYSQL)
     -> ::libc::c_int;
    pub fn mysql_rollback_cont(ret: *mut my_bool, mysql: *mut MYSQL,
                               status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_autocommit(mysql: *mut MYSQL, auto_mode: my_bool) -> my_bool;
    pub fn mysql_autocommit_start(ret: *mut my_bool, mysql: *mut MYSQL,
                                  auto_mode: my_bool) -> ::libc::c_int;
    pub fn mysql_autocommit_cont(ret: *mut my_bool, mysql: *mut MYSQL,
                                 status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_more_results(mysql: *mut MYSQL) -> my_bool;
    pub fn mysql_next_result(mysql: *mut MYSQL) -> ::libc::c_int;
    pub fn mysql_next_result_start(ret: *mut ::libc::c_int, mysql: *mut MYSQL)
     -> ::libc::c_int;
    pub fn mysql_next_result_cont(ret: *mut ::libc::c_int, mysql: *mut MYSQL,
                                  status: ::libc::c_int) -> ::libc::c_int;
    pub fn mysql_stmt_next_result(stmt: *mut MYSQL_STMT) -> ::libc::c_int;
    pub fn mysql_stmt_next_result_start(ret: *mut ::libc::c_int,
                                        stmt: *mut MYSQL_STMT)
     -> ::libc::c_int;
    pub fn mysql_stmt_next_result_cont(ret: *mut ::libc::c_int,
                                       stmt: *mut MYSQL_STMT,
                                       status: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mysql_close_slow_part(mysql: *mut MYSQL) -> ();
    pub fn mysql_close(sock: *mut MYSQL) -> ();
    pub fn mysql_close_start(sock: *mut MYSQL) -> ::libc::c_int;
    pub fn mysql_close_cont(sock: *mut MYSQL, status: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mysql_get_socket(mysql: *const MYSQL) -> my_socket;
    pub fn mysql_get_timeout_value(mysql: *const MYSQL) -> ::libc::c_uint;
    pub fn mysql_get_timeout_value_ms(mysql: *const MYSQL) -> ::libc::c_uint;
    pub fn mysql_net_read_packet(mysql: *mut MYSQL) -> ::libc::c_ulong;
    pub fn mysql_net_field_length(packet: *mut *mut ::libc::c_uchar)
     -> ::libc::c_ulong;
}
